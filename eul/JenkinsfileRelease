#!/usr/bin/env groovy

// Version templatefile python : 2.0.5

// D√©claration de la shared library build_libs
@Library('build_libs') _

// Options du build. Plusieurs sont d√©finies via la m√©thode defaultBuildOptions.
// Consulter le README du template pour plus d'informations
Map options = [
    // Nombre de builds √† conserver dans l'historique des builds du job Jenkins
    NUM_TO_KEEP: 10,
    // Version de python
    PYTHON_VERSION: '3.9',
    // Indique si une image Docker applicative est √† produire par le pipeline pour le projet
    DOCKER_BUILD: true,
    // Permet d'activer des logs plus d√©taill√©s lors du build Docker
    IMAGE_BUILD_VERBOSE: false,
]

// Valorisation des options par d√©faut
options = defaultBuildOptions(options)

// Propri√©t√©s du job
properties([
    // Connexion GitLab
    gitLabConnection("${options['GITLAB_NAME']}"),
    // Conservation des N derni√®res ex√©cutions
    buildDiscarder(logRotator(numToKeepStr: "${options['NUM_TO_KEEP']}")),
    // Param√®tres du build de release. Les valeurs du build pr√©c√©dent sont prises en valeur par d√©faut, pour aide √† la saisie
    parameters([
        string(name: 'BRANCH_RELEASE', defaultValue: "${params['BRANCH_RELEASE']}", description: 'nom de la branche √† releaser', trim: true),
        string(name: 'RELEASE_VERSION', defaultValue: "${params['RELEASE_VERSION']}", description: 'version de la release √† construire (format : X.Y.Z)', trim: true),
        string(name: 'DEVELOPMENT_VERSION', defaultValue: "${params['DEVELOPMENT_VERSION']}", description: 'Prochaine version de d√©veloppement (format : X.Y.Z - \'.dev0\' sera automatiquement ajout√©)', trim: true),
        choice(name: 'REPO_DEPLOY_RELEASE', choices: ['prod', 'dev'], description: 'r√©pertoire de destination des artefacts de release (dev ou prod)'),
    ])
])

// Tous les param√®tres du build de release doivent √™tre renseign√©s
params.each { param ->
    if (!param.value) {
        error "‚ùå Le param√®tre ${param.key} doit √™tre renseign√©"
    }
}

// Suppression du suffixe .dev0 s'il a √©t√© renseign√© dans le param√®tre DEVELOPMENT_VERSION (pr√©requis zest.releaser)
env.DEVELOPMENT_VERSION = "${env.DEVELOPMENT_VERSION}".replaceAll('.dev0', '')

// Cible 'dev' ou 'prod' de la release, qui d√©termine le d√©p√¥t Artifactory de publication
String targetRepositoryType = params.REPO_DEPLOY_RELEASE
Boolean targetingProd = targetRepositoryType == 'prod'

// Le build Docker est lanc√© uniquement si l'option correspondante est activ√©e
Boolean dockerEnabled = options['DOCKER_BUILD'] == true

// Sinon le timestamp des logs eul-cli, s'il est activ√©, est d√©cal√© d'une heure
env.TZ = 'Europe/Paris'

// Le nom du build prend le nom de la version √† releaser
currentBuild.displayName = "${RELEASE_VERSION}"

// Horodatage des lignes de log Jenkins
timestamps {
    // Prise en charge des codes ANSI pour affichage de logs Jenkins coloris√©s
    ansiColor('xterm') {
        withTools([
            [name: 'python', version: "${options['PYTHON_VERSION']}"],
            [name: 'sonar-scanner', version: 'latest', registry: 'eul'],
            dockerEnabled ? [name: 'buildkit', image: 'moby/buildkit', version: 'v0.10.3-rootless'] : [:],
        ]) {
            try {
                stage('Checkout') {
                    println 'üî∞ R√©cup√©ration du code source'
                    scmInfo = checkout scm
                    env.GIT_URL = scmInfo.GIT_URL
                    env.GIT_SHORT_URL = "${env.GIT_URL}".replace('https://', '')
                    env.GIT_COMMIT = scmInfo.GIT_COMMIT
                    println '‚úîÔ∏è R√©cup√©ration du code source effectu√©e'
                }
                stage('Setup') {
                    container('python') {
                        // V√©rification de l'unicit√© du tag quand la cible de publication est le d√©p√¥t de production
                        if (RELEASE_VERSION == sh(script: 'git tag -l $RELEASE_VERSION', returnStdout: true).trim()) {
                            if (targetingProd) {
                                error "‚ùå Le tag ${RELEASE_VERSION} existe d√©j√†"
                            }
                            env.TAG_ALREADY_EXISTS = true
                            println "üìú Le tag $RELEASE_VERSION existe. Il sera remplac√© en fin de release"
                        } else {
                            env.TAG_ALREADY_EXISTS = false
                            println "üìú Le tag $RELEASE_VERSION n'existe pas. Il sera pos√© en fin de release"
                        }
                    }
                }
                stage('Install') {
                    container('python') {
                        gitlabCommitStatus('install') {
                            println 'üî∞ Installation des modules'
                            env.VERSION = sh(returnStdout: true, script: 'eul python setup.py --version').trim()
                            env.PIP_PACKAGE_NAME = sh(returnStdout: true, script: 'eul python setup.py --name').trim()
                            sh 'eul pip install --upgrade --force-reinstall --no-cache-dir pip'
                            sh 'eul pip install --upgrade --force-reinstall --no-cache-dir eul.zest.releaser'
                            sh 'eul pip install -r requirements.txt --upgrade --force-reinstall --no-cache-dir .[ci]'
                            println '‚úîÔ∏èÔ∏è Installation des modules effectu√©e'
                        }
                    }
                }
                stage('Tests') {
                    container('python') {
                        gitlabCommitStatus('tests') {
                            println 'üî∞ Ex√©cution des tests unitaires'
                            if (sh(script: 'pytest -m \'not database_access\' ', returnStatus: true))
                                error '‚ùå Release annul√©e. Les tests unitaires ont √©chou√©'
                            }
                            println '‚úîÔ∏è Ex√©cution des tests unitaires effectu√©e'
                        }
                    }
                stage('Quality gate') {
                    println 'üî∞ Analyse qualit√© avec barri√®re qualit√©'
                    gitlabCommitStatus('formatage') {
                        container('python') {
                            if (sh(script: 'black --check --diff .', returnStatus: true)) {
                                error '‚ùå Release annul√©e. Black a identifi√© un formatage de code incorrect'
                            }
                            println '‚úîÔ∏èÔ∏è V√©rification avec le formateur de code Black effectu√©'
                        }
                    }
                    gitlabCommitStatus('sonarqube') {
                        container('python') {
                            sh 'pylint src > pylint-report.txt || pylint-exit \$?'
                            println '‚úîÔ∏èÔ∏è Analyse statique avec pylint effectu√©e'
                        }
                        container('sonar-scanner') {
                            withSonarQubeEnv('sonarqube') {
                                // Extrait la version au format attendu par SonarQube (<major.<minor>) √† partir de options['PYTHON_VERSION']
                                String sonarPythonVersion = options['PYTHON_VERSION'].replaceAll(/(\d+\.\d+).*/, '$1')
                                sh """\
                                    eul sonar-scanner \
                                    -Dsonar.projectKey=${options['PROJECT_SONAR_KEY']} \
                                    -Dsonar.projectVersion=${env.VERSION} \
                                    -Dsonar.python.version=\"${sonarPythonVersion}\" \
                                    -Dsonar.links.ci=${JOB_URL} \
                                    -Dsonar.links.homepage=${GIT_URL} \
                                """
                            }
                            // Contr√¥le du passage de la barri√®re qualit√© SonarQube
                            timeout(time: 1, unit: 'HOURS') {
                                if (waitForQualityGate()?.status != 'OK') {
                                    error "‚ùå Release annul√©e. Le projet n'a pas pass√© la barri√®re qualit√©"
                                }
                            }
                        }
                    }
                    println '‚úîÔ∏è Analyse qualit√© effectu√©e. Le projet a pass√© la barri√®re qualit√©'
                }
                stage('Local CVE scan') {
                    container('python') {
                        gitlabCommitStatus('local-scan') {
                            println 'üî∞ Scan de s√©curit√© local sur les artefacts produits'
                            // Scan CVE d√©clench√© au plus t√¥t pour stopper le release dans le cas o√π des CVE critiques sont pr√©sentes dans les d√©pendances projet
                            if (sh(script: 'eul artefacts cve-scan --local --critical --pip', returnStatus: true)) {
                                // La pr√©sence de cve critiques dans les artefacts est bloquante en release
                                error "‚ùå Release annul√©e. Le scan de CVE a identifi√© des vuln√©rabilit√©s critiques dans l'artefact ou ses d√©pendances"
                            }
                            println '‚úîÔ∏èÔ∏è Scan CVE local effectu√©'
                        }
                    }
                }
                stage('Release') {
                    container('python') {
                        gitlabCommitStatus('Release') {
                            sh '''
                                git config --global user.email pic-eul@sncf.com
                                git config --global user.name "PIC e.UL"
                                git remote set-url origin https://${gitlab_user}:${gitlab_pass}@$GIT_SHORT_URL
                                git branch -u origin/$BRANCH_RELEASE
                            '''
                            // Version bumping et commit avec la commande prerelease de zest.releaser
                            sh 'prerelease --no-input'
                            // ‚ö†Ô∏è Dans le cas d'une release sur le d√©p√¥t de dev (non immutable), si le tag existe d√©j√† alors il est d√©plac√©,
                            // il faut dans ce cas utiliser l'option -f sur le push du tag
                            env.GIT_PUSH_TAG_OPTS = env.TAG_ALREADY_EXISTS?.toBoolean() ? '-f' : ''
                            sh 'git tag $GIT_PUSH_TAG_OPTS $RELEASE_VERSION'
                            // Packaging. S'il n'y a pas de module .whl √† produire, remplacer par : sh "eul python setup.py sdist --dist-dir ${RELEASE_VERSION}"
                            sh "eul python setup.py sdist --dist-dir ${RELEASE_VERSION} bdist_wheel --dist-dir ${RELEASE_VERSION}"
                            println 'üî∞ Publication des artefacts du projet dans Artifactory'
                            sh "eul --repo-target ${targetRepositoryType} artefacts upload -T pypi ${RELEASE_VERSION}/ ${options['PROJECT_NAME']}/"
                            // Publication des infos de build dans artifactory
                            sh 'eul artefacts build-publish'
                            // Publication Jenkins du lien sur le build Artifactory
                            publishArtifactoryBuildLink()
                            println '‚úîÔ∏è Publication des artefacts effectu√©e'
                            // Avec zest.releaser : next development version bumping et commit
                            sh 'postrelease --no-input'
                        }
                    }
                    println "‚úîÔ∏è Release de ${RELEASE_VERSION} effectu√©e"
                }
                stage('CVE scan') {
                    container('python') {
                        println 'üî∞ Scan de s√©curit√© distant sur les artefacts produits sur Artifactory'
                        // Par d√©faut, le scan de build est synchrone pour le pipeline de release. Le r√©sultat final du scan sera attendu par le pipeline.
                        // Pour forcer le pipeline √† ne pas attendre le r√©sultat du scan de build, il faut enlever le flag `--wait-for-result` √† la commande de scan cve.
                        // cf: https://docs.apps.eul.sncf.fr/share/securise-scan-dependances
                        if (sh(script: 'eul artefacts cve-scan --wait-for-result', returnStatus: true)) {
                            // Si le pipeline arrive √† ce stage cela veut dire qu'il a pass√© le scan local et ne pr√©sente pas de CVE critiques mais hautes.
                            // Pour mettre la pipeline en erreur, remplacer unstable "‚ö†Ô∏è..." par error "‚ùå..." dans la ligne suivante
                            unstable "‚ö†Ô∏èÔ∏è Le scan de CVE a identifi√© des vuln√©rabilit√©s hautes dans l'artefact ou ses d√©pendances"
                        }
                        println '‚úîÔ∏è Scan CVE distant effectu√©'
                    }
                }
                stage('Docker build') {
                    when(dockerEnabled) {
                        container('buildkit') {
                            println 'üî∞ build Docker avec Buildkit'
                            String dockerVerboseOption = options['IMAGE_BUILD_VERBOSE'] ? '--debug' : ''
                            env.IMAGE_NAME = options['PROJECT_NAME']
                            env.IMAGE_VERSION = "${RELEASE_VERSION}"
                            
                            result = sh(script: """
                               eul --repo-target ${targetRepositoryType} image $dockerVerboseOption build docker --tag=$IMAGE_NAME:$IMAGE_VERSION \
                                --build-arg 'VERSION=$IMAGE_VERSION' --build-arg 'IMAGE_NAME=$IMAGE_NAME'  \
                                --build-arg EUL_REPO_USER='${EUL_REPO_USER}' --build-arg EUL_REPO_PASSWORD='${EUL_REPO_PASSWORD}'  \
                                --build-arg EUL_ARESIS='${EUL_ARESIS}' --build-arg PIP_PACKAGE_NAME='${PIP_PACKAGE_NAME}'
                                """, returnStatus: true)

                            if (result != 0) {
                                error '‚ùå Le build Docker avec BuildKit a √©chou√©'
                            }
                            println '‚úîÔ∏è build Docker effectu√©'
                        }
                    }
                }
                println 'üëç Build du job de release termin√© avec succ√®s'
                currentBuild.result = 'SUCCESS'
            } catch (all) {
                currentBuild.result = 'FAILURE'
                // Envoi d'un mail en cas d'√©chec
                // Voir https://jenkins.io/doc/pipeline/steps/email-ext/ pour plus de pr√©cisions
                emailext(
                    body: '$DEFAULT_CONTENT',
                    subject: '$DEFAULT_SUBJECT',
                    // Envoi du mail aux d√©veloppeurs responsables d'une modification du code
                    recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                    // Pour √©galement envoyer le mail √† une liste d'adresses (s√©par√©es par des ,) :
                    //to: "adressmail1, adressmail2"
                )
                throw all
            }
            finally {
                // Collecte et remont√©e dans Jenkins des probl√®mes rencontr√©s pendant le build
                addNgIssuesReportToJob('tools': ['cveScan', 'python', 'taskScanner'])
                // Pour le suivi et les indicateurs eUL
                eulNotify()
            }
        }
    }
}