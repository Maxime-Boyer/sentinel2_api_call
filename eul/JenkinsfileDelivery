#!/usr/bin/env groovy

//Importing deployment library and build_libs
@Library(['build_libs']) _

//////////////////////// Parametres Projet ///////////////////////////
//Emplacement des sources du chart dans le repo. A configurer
//def chartFolder = '.'
def chartFolder = 'charts/dag_nao'

//Nom de l'application
def applicationName = 'dag_nao'


//Nom de l'environnement de test.
def testEnv = 'developpement'

//TODO le déduire
def gitlabConnection = 'GITLAB MOB cdsdtr'

def helmVersion = '3.6-0'

//////////////////////// Fin des parametres Projet ///////////////////////////

String dockerRegistry = 'registry-docker.apps.eul.sncf.fr'

//CONFIG JOB JENKINS
properties([[$class: 'BuildConfigProjectProperty'],
  //Connexion Gitlab
  gitLabConnection(gitlabConnection),
  //Conservation des 10 dernières éxecutions
  buildDiscarder(logRotator(numToKeepStr: "10")),
  //parameter of the job
  parameters([
    string(defaultValue: '0.0.0', description: 'version de l\'application à construire (format: X.Y.Z)', name: 'VERSION')
  ])
])


// VARS : Helm
//Le dépôt cible est récupéré depuis le context d'éxécution
def project = com.sncf.eul.common.BuildContext.current().project
println("project : $project")
String helmRegistry = project.dockerRegistryProdPath
println("helmRegistry : $helmRegistry")
String helmTag = dockerRegistry + '/' + helmRegistry + '/' + applicationName + ':' + params.VERSION
println("helmTag : $helmTag")


//Renommage du build
currentBuild.displayName = params.VERSION

timestamps {
    withTools([name: 'helm', version: helmVersion, registry: 'eul']) {
      checkout scm
      container('helm') {
          stage('Helm Test') {
            try {
              sh """
              helm lint ${chartFolder} \
                  -f ${chartFolder}/values.yaml \
                  """
            }
            catch (exc) {
              println "Failed to check Helm Chart - ${currentBuild.fullDisplayName}"
              throw(exc)
            }
          }

          stage('Helm Push') {
            try {
              sh """
              export HELM_EXPERIMENTAL_OCI=1
              helm registry login -u \$DOCKER_REGISTRY_RW_USER -p \$DOCKER_REGISTRY_RW_PASS ${dockerRegistry}
              helm chart save ${chartFolder} '${helmTag}'
              helm chart push '${helmTag}'
              """       
            }
            catch (exc) {
              println "Failed to push Helm Chart - ${currentBuild.fullDisplayName}"
              throw(exc)
            }
          }
    }
  }
}
